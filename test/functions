# helper functions

_ensurerepo() {
	if [[ -z "$REPOSITORY" ]]; then
		echo "Please define the REPOSITORY environment variable" >&2
		return 1
	fi
	if [[ ! -d "$REPOSITORY" ]]; then
		hg init "$REPOSITORY"
	fi
}

_decorate() {
	local FILE="$1"

	paste <(cat "$FILE" | while read line; do
		echo -e "$RANDOM"
	done | sort -n -k1,1) "$FILE"
}

_interleave() {
	local IN0="$1"
	local IN1="$2"
	local OUT="$3"

	local TMP=$(mktemp /tmp/interleave-XXX.txt) || return 1
	sort -k1,1 -snm <(_decorate "$IN0") <(_decorate "$IN1") | cut -f2 > "$TMP"
	mv -f "$TMP" "$OUT"
}

_randdelete() {
	local FILE="$1"

	local TMP=$(mktemp /tmp/randdelete-XXX.txt) || return 1
	nl "$FILE" | shuf | head -n $(( $RANDOM % $(wc -l < "$FILE") )) | sort -k1,1 -sn | cut -f2 > "$TMP"
	mv -f "$TMP" "$FILE"
}

_rndtext() {
	local OUT="$1"

	cat /dev/urandom | tr -dc 'a-zA-Z0-9 ' | fold -w 80 | head -n $(( $RANDOM % 10 + 1 )) > "$OUT"
}

# testing functions

tip_node() {
	local REPO="$1"

	hg -R "$REPO" tip --template '{node|short}'
}

compare_repos() {
	local SRC="$1"
	local SRC_AT="$2"
	local DST="$3"
	local DST_AT="$4"
	local TMPDIR=$(mktemp -d /tmp/cmprepo-XXXXXX) || exit 1

	hg -R "$SRC" archive -r "$SRC_AT" "$TMPDIR/src"
	hg -R "$DST" archive -r "$DST_AT" "$TMPDIR/dst"
	rm -f "$TMPDIR"/{src,dst}/.hg_archival.txt
	if diff -qr "$TMPDIR/src" "$TMPDIR/dst" 2>/dev/null; then
		echo "'$(basename $SRC)@$SRC_AT' is equal to '$(basename $DST)@$DST_AT'"
	else
		echo "Repo '$(basename $SRC)@$SRC_AT' differs from '$(basename $DST)@$DST_AT'"
		exit 1
	fi
	rm -rf "$TMPDIR"
}

inspect_repo() {
	local REPO="$1"

	echo "*** Revs in '$REPO':"
	hg -R "$REPO" log -r 0:tip --template '{node|short} {desc|firstline}\n'
}

# randomized mercurial actions

add() {
	_ensurerepo || return 1

	local FILE=$(mktemp "$REPOSITORY"/file-XXX.txt) || return 1
	local MESSAGE="add file '${FILE#$REPOSITORY/}'"
	_rndtext "$FILE"
	echo "$MESSAGE" >&2
	hg -R "$REPOSITORY" add "$FILE"
	hg -R "$REPOSITORY" ci -m "$MESSAGE"
}

remove() {
	_ensurerepo || return 1

	local FILE=$(ls -1 "$REPOSITORY" | shuf -n 1)
	if [[ -z "$FILE" ]]; then
		echo "nothing to remove" >&2
		return
	fi
	local MESSAGE="remove file '$FILE'"
	echo "$MESSAGE" >&2
	hg -R "$REPOSITORY" rm -f "$REPOSITORY/$FILE"
	hg -R "$REPOSITORY" ci -m "$MESSAGE"
}

rename() {
	_ensurerepo || return 1

	local FILE0=$(ls -1 "$REPOSITORY" | shuf -n 1)
	if [[ -z "$FILE0" ]]; then
		echo "nothing to rename" >&2
		return
	fi
	local FILE1=$(mktemp "$REPOSITORY"/file-XXX.txt) || return 1
	rm -f "$FILE1"
	local MESSAGE="rename file '$FILE0' to '${FILE1#$REPOSITORY/}'"
	echo "$MESSAGE" >&2
	hg -R "$REPOSITORY" mv "$REPOSITORY/$FILE0" "$FILE1"
	hg -R "$REPOSITORY" ci -m "$MESSAGE"
}

edit() {
	_ensurerepo || return 1

	local FILE=$(ls -1 "$REPOSITORY" | shuf -n 1)
	if [[ -z "$FILE" ]]; then
		echo "nothing to edit" >&2
		return
	fi
	local EDITS=$(mktemp /tmp/edits-XXX.txt) || return 1
	MESSAGE="edit file '$FILE'"
	_rndtext "$EDITS"
	_randdelete "$REPOSITORY/$FILE"
	_interleave "$REPOSITORY/$FILE" "$EDITS" "$REPOSITORY/$FILE"
	rm -f "$EDITS"
	echo "$MESSAGE" >&2
	hg -R "$REPOSITORY" ci -m "$MESSAGE"
}

merge() {
	_ensurerepo || return 1

	local REVS=( $( hg -R "$REPOSITORY" heads --template '{node|short}\n' ) )
	if [[ "${#REVS[@]}" -lt 2 ]]; then
		echo "nothing to merge" >&2
		return
	fi
	local HEAD=( $( shuf -n 2 -e "${REVS[@]}" ) )
	MESSAGE="merge revs '${HEAD[0]}' '${HEAD[1]}'"
	echo "$MESSAGE" >&2
	hg -R "$REPOSITORY" merge -y --tool internal:local -r "${HEAD[0]}" -r "${HEAD[1]}" >/dev/null 2>&1
	hg -R "$REPOSITORY" ci -m "$MESSAGE"
}

update() {
	_ensurerepo || return 1

	local REV=$(hg -R "$REPOSITORY" log --template '{node|short}\n' | shuf -n 1)
	MESSAGE="update to rev '$REV'"
	echo "$MESSAGE" >&2
	hg -R "$REPOSITORY" up -r "$REV" >/dev/null 2>&1
}

work() {
	_ensurerepo || return 1

	local NUM_COMMITS="$1"
	if [[ -z "$NUM_COMMITS" ]]; then
		NUM_COMMITS=$(( $RANDOM / 5000 + 1 ))
	fi

	while [[ $NUM_COMMITS -gt 0 ]]; do
		local ACTION=$RANDOM
		if [[ $ACTION -lt 10000 ]]; then
			add
		elif [[ $ACTION -lt 15000 ]]; then
			remove
		elif [[ $ACTION -lt 16000 ]]; then
			rename
		elif [[ $ACTION -lt 20000 ]]; then
			update
		elif [[ $ACTION -lt 24000 ]]; then
			merge
		else
			edit
		fi
		NUM_COMMITS=$(( $NUM_COMMITS - 1 ))
	done
}
